#BlueJ class context
comment0.params=min\ max
comment0.target=int\ random(int,\ int)
comment0.text=\n\ Returns\ a\ "true"\ random\ integer\ in\ the\ [min..max]\ range,\ inclusive.\ <BR>\n\ Precondition\:\ max\ >\ min\ <br>\n\ Example\:<br>\n\ System.out.println(Expo.random(100,200));\ <br>\n\ This\ will\ display\ a\ random\ integer\ between\ 100\ and\ 200.\n
comment1.params=
comment1.target=void\ pause()
comment1.text=\n\ Pauses\ the\ output\ and\ waits\ for\ the\ user\ to\ press\ the\ [enter]\ key.\ <br>\n\ Example\:\ <br>\n\ Expo.pause();\n
comment10.params=g
comment10.target=void\ setRandomColor(java.awt.Graphics)
comment10.text=\n\ Sets\ the\ current\ color\ to\ a\ random\ color\ value\ which\ can\ be\ any\ of\ the\ 16,000,000+\ possible\ colors.\ <br>\n\ Example\:\ <br>\n\ Expo.setRandomColor(g);\n
comment11.params=g\ bgColor
comment11.target=void\ setBackground(java.awt.Graphics,\ java.awt.Color)
comment11.text=\n\ Sets\ the\ entire\ background\ to\ a\ single\ color\ using\ a\ Color\ object\ parameter.\ <br>\n\ Precondition\:\ The\ applet\ window\ cannot\ be\ greater\ than\ 4800\ X\ 3600\ in\ size.\ <br>\n\ Postcondition\:\ The\ current\ drawing\ color\ will\ not\ be\ affected\ by\ the\ background\ color.\ <br>\n\ Example\:\ <br>\n\ Expo.setBackground(g,Expo.red);\n\ This\ will\ make\ the\ entire\ background\ red.\n\ 36\ colors\ constants\ are\ built\ into\ the\ Expo\ class.\ \ These\ colors\ are\ listed\ near\ the\ top\ of\ this\ file.\n
comment12.params=g\ colorNum
comment12.target=void\ setBackground(java.awt.Graphics,\ int)
comment12.text=\n\ Sets\ the\ entire\ background\ to\ one\ of\ 10\ predefined\ primary\ colors\ using\ a\ single\ int\ parameter.\ <br>\n\ 0\ \=\ black\ <br>\n\ 1\ \=\ red\ <br>\n\ 2\ \=\ green\ <br>\n\ 3\ \=\ blue\ <br>\n\ 4\ \=\ orange\ <br>\n\ 5\ \=\ cyan\ <br>\n\ 6\ \=\ magenta\ <br>\n\ 7\ \=\ yellow\ <br>\n\ 8\ \=\ gray\ <br>\n\ 9\ \=\ pink\ <br>\n\ Any\ negative\ number\ will\ give\ you\ white.\ <br><br>\n\ Example\:\ <br>\n\ Expo.setBackground(g,1);\ <br>\n\ Changes\ the\ background\ color\ to\ red.\n
comment13.params=g\ red\ green\ blue
comment13.target=void\ setBackground(java.awt.Graphics,\ int,\ int,\ int)
comment13.text=\n\ Sets\ the\ entire\ background\ to\ a\ single\ color\ using\ 3\ int\ parameters\ representing\ the\ amount\ of\ red,\ green\ and\ blue.<br>\n\ This\ allows\ for\ more\ than\ 16\ million\ different\ color\ combinations.\ <br>\n\ Preconditions\:\ All\ 3\ color\ values\ need\ to\ be\ between\ 0\ and\ 255\ inclusive.\ <br>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ applet\ window\ cannot\ be\ greater\ than\ 4800\ X\ 3600\ in\ size.\ <br>\n\ Postcondition\:\ The\ current\ drawing\ color\ will\ not\ be\ affected\ by\ the\ background\ color.\ <br>\n\ Example\:\ <br>\n\ Expo.setBackground(g,190,10,47);\ <br>\n\ Changes\ the\ background\ color\ to\ the\ shade\ of\ red\ used\ in\ the\ official\ Texas\ Flag\n
comment14.params=g\ x\ y
comment14.target=void\ drawPixel(java.awt.Graphics,\ int,\ int)
comment14.text=\n\ Draws\ a\ single\ pixel\ at\ the\ specified\ x,y\ location.\ <BR>\n\ Example\:\ <BR>\n\ Expo.drawPixel(g,100,200);\ <BR>\n\ Draws\ a\ very\ small\ single\ dot\ (pixel)\ on\ the\ computer\ screen\ 100\ pixels\ over\ and\ 200\ pixels\ down\n
comment15.params=g\ x\ y
comment15.target=void\ drawPoint(java.awt.Graphics,\ int,\ int)
comment15.text=\n\ Draws\ a\ 3\ pixel\ X\ 3\ pixel\ "point"\ whose\ center\ is\ at\ the\ specified\ x,y\ location.\ <BR>\n\ Example\:\ <BR>\n\ Expo.drawPoint(g,100,200);\n\ Draws\ a\ larger,\ more\ visible\ (than\ drawPixel)\ dot\ on\ the\ computer\ screen\ 100\ pixels\ over\ and\ 200\ pixels\ down.\n
comment16.params=g\ x1\ y1\ x2\ y2
comment16.target=void\ drawLine(java.awt.Graphics,\ int,\ int,\ int,\ int)
comment16.text=\n\ Draws\ the\ line\ segment\ connecting\ coordinates\ x1,y1\ and\ x2,y2.\ <BR>\n\ Example\:\ <BR>\n\ Expo.drawLine(g,100,200,300,400);\ <BR>\n\ Draws\ a\ line\ segment\ connecting\ the\ starting\ coordinate\ point\ (100,200)\ with\ the\ ending\ point\ (300,400).\n
comment17.params=g\ centerX\ centerY\ radius
comment17.target=void\ drawCircle(java.awt.Graphics,\ int,\ int,\ int)
comment17.text=\n\ Draws\ an\ open\ circle.<br>\n\ The\ user\ specifies\ the\ x,y\ coordinate\ of\ the\ center\ of\ the\ circle\ as\ well\ as\ the\ radius\ value.\ <br>\n\ Example\:\ <br>\n\ Expo.drawCircle(g,300,200,100);\ <br>\n\ Draws\ an\ open\ circle\ with\ a\ radius\ of\ 100\ pixels\ whose\ center\ is\ located\ at\ the\ coordinate\ (300,200).\n
comment18.params=g\ centerX\ centerY\ hRadius\ vRadius
comment18.target=void\ drawOval(java.awt.Graphics,\ int,\ int,\ int,\ int)
comment18.text=\n\ Draws\ an\ open\ oval.<br>\n\ The\ user\ specifies\ the\ x,y\ coordinate\ of\ the\ center\ of\ the\ oval\ as\ well\ as\ the\ horizontal\ and\ vertical\ radii\ values.\ <br>\n\ Example\:\ <br>\n\ Expo.drawOval(g,300,200,100,50);\ <br>\n\ Draws\ an\ open\ oval\ with\ a\ horizontal\ radius\ of\ 100\ pixels\ and\ a\ vertical\ radius\ of\ 50\ pixels.\ <br>\n\ The\ center\ of\ this\ oval\ is\ located\ at\ the\ coordinate\ (300,200).\n
comment19.params=g\ centerX\ centerY\ hRadius\ vRadius\ start\ finish
comment19.target=void\ drawArc(java.awt.Graphics,\ int,\ int,\ int,\ int,\ int,\ int)
comment19.text=\n\ Draws\ and\ arc\ which\ looks\ like\ a\ curve.<br>\n\ An\ ARC\ is\ a\ "piece"\ of\ an\ OVAL.<br>\n\ The\ first\ 5\ parameters\ (g\ and\ 4\ ints)\ are\ the\ same\ as\ drawOval.<br>\n\ There\ are\ 2\ additional\ parameters\ for\ the\ starting\ degree\ value\ and\ finishing\ degree\ of\ the\ arc.\ <br>\n\ 0\ degrees\ is\ at\ the\ 12\:00\ position\ and\ the\ degrees\ progress\ in\ a\ CLOCKWISE\ fashion.\ <br>\n\ (90\ degrees\ is\ at\ 3\:00,\ 180\ degrees\ is\ at\ 6\:00,\ 270\ degrees\ is\ at\ 9\:00,\ 360\ degrees\ is\ back\ at\ 12\:00).\n
comment2.params=n
comment2.target=void\ delay(int)
comment2.text=\n\ Pauses\ the\ output\ for\ a\ specified\ number\ of\ milliseconds\ (1/1000ths\ of\ a\ second).\ <br>\n\ Examples\:<br>\n\ Expo.delay(1000);\ //\ pause\ for\ 1\ second\ <br>\n\ Expo.delay(2000);\ //\ pause\ for\ 2\ seconds\ <br>\n\ Expo.delay(500);\ \ //\ pause\ for\ 1/2\ of\ a\ second\ <br>\n\ Expo.delay(100);\ \ //\ pause\ for\ 1/10\ of\ a\ second\ <br>\n\ Expo.delay(10);\ \ \ //\ pause\ for\ 1/100\ of\ a\ second\ <br>\n\ Expo.delay(1);\ \ \ \ //\ pause\ for\ 1/1000\ of\ a\ second\ <br>\n
comment20.params=g\ coordinate
comment20.target=void\ drawPolygon(java.awt.Graphics,\ int[])
comment20.text=\n\ Draws\ an\ open\ irregular\ polygon\ using\ 3\ or\ more\ sets\ of\ provided\ coordinates.\ <br>\n\ Examples\:\ <br>\n\ Expo.drawPolygon(g,100,300,200,100,300,300);\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //\ for\ a\ triangle\n\ Expo.drawPolygon(g,525,300,600,250,650,250,725,300,725,350,650,400);\ //\ for\ a\ hexagon\n
comment21.params=g\ centerX\ centerY\ radius\ sides
comment21.target=void\ drawRegularPolygon(java.awt.Graphics,\ int,\ int,\ int,\ int)
comment21.text=\n\ Draws\ an\ open\ regular\ polygon\ with\ a\ specified\ number\ of\ sides.<br>\n\ The\ center\ of\ this\ polygon\ is\ specified\ by\ centerX,centerY\ and\ its\ size\ is\ specified\ by\ radius\ <br>\n\ (As\ in\ the\ radius\ of\ the\ circle\ the\ regular\ polygon\ would\ fit\ inside).\ <br>\n\ Precondition\:\ sides\ >\=\ 3\ <br>\n\ Example\:\n\ Expo.drawRegularPolygon(g,300,200,100,8);\n\ Draws\ an\ open\ regular\ octagon\ with\ a\ radius\ of\ 100\ pixels\ whose\ center\ is\ located\ at\ the\ coordinate\ (300,200).\n
comment22.params=g\ x1\ y1\ x2\ y2
comment22.target=void\ drawRectangle(java.awt.Graphics,\ int,\ int,\ int,\ int)
comment22.text=\n\ Draws\ an\ open\ rectangle.<br>\n\ The\ upper-left-hand\ corner\ is\ specified\ by\ x1,y1\ and\ the\ lower-right-hand\ corner\ is\ specified\ by\ x2,\ y2.\ <br>\n\ Example\:\ <br>\n\ Expo.drawRectangle(g,100,200,300,400);\ <br>\n\ Draws\ an\ open\ rectangle\ whose\ upper-left-hand\ coordinate\ is\ (100,200)\ and\ whose\ lower-right-hand\ coordinate\ is\ (300,400).\n
comment23.params=g\ centerX\ centerY\ radius\ points
comment23.target=void\ drawStar(java.awt.Graphics,\ int,\ int,\ int,\ int)
comment23.text=\n\ Draws\ an\ open\ star\ with\ a\ specified\ number\ of\ points.<br>\n\ The\ center\ of\ this\ star\ is\ specified\ by\ centerX,centerY\ and\ its\ size\ is\ specified\ by\ radius\ <br>\n\ (As\ in\ the\ radius\ of\ the\ circle\ the\ star\ would\ fit\ inside).\ <br>\n\ Precondition\:\ points\ >\=\ 2\ <br>\n\ Example\:\ <br>\n\ Expo.drawStar(g,300,200,100,8);\ <br>\n\ Draws\ an\ open\ star\ with\ 8\ points\ and\ a\ radius\ of\ 100\ pixels\ whose\ center\ is\ located\ at\ the\ coordinate\ (300,200).\n
comment24.params=g\ s\ x\ y
comment24.target=void\ drawString(java.awt.Graphics,\ java.lang.String,\ int,\ int)
comment24.text=\n\ Draws\ a\ String\ s\ on\ the\ graphics\ screen\ at\ a\ certain\ x,y\ coordinate.\ <br>\n\ The\ coordinate\ x,y\ is\ the\ location\ of\ the\ bottom-left\ corner\ of\ the\ first\ character\ in\ the\ String\ s.\ <br>\n\ Example\:\ <br>\n\ Expo.drawString(g,"Hello\ There\!",100,200);\n
comment25.params=g\ name\ style\ size
comment25.target=void\ setFont(java.awt.Graphics,\ java.lang.String,\ int,\ int)
comment25.text=\n\ Allows\ you\ to\ change\ the\ current\ "font"\ used\ by\ the\ drawString\ method.\ <br>\n\ Example\:\ <br>\n\ Expo.setFont(g,"Courier",Font.BOLD,36);\n
comment26.params=g\ centerX\ centerY\ radius
comment26.target=void\ fillCircle(java.awt.Graphics,\ int,\ int,\ int)
comment26.text=\n\ Draws\ a\ solid\ "filled\ in"\ circle.<br>\n\ The\ user\ specifies\ the\ x,y\ coordinate\ of\ the\ center\ of\ the\ circle\ as\ well\ as\ the\ radius\ value.\ <br>\n\ Example\:\ <br>\n\ Expo.fillCircle(g,300,200,100);\ <br>\n\ Draws\ a\ solid\ circle\ with\ a\ radius\ of\ 100\ pixels\ whose\ center\ is\ located\ at\ the\ coordinate\ (300,200).\n
comment27.params=g\ centerX\ centerY\ hRadius\ vRadius
comment27.target=void\ fillOval(java.awt.Graphics,\ int,\ int,\ int,\ int)
comment27.text=\n\ Draws\ a\ solid\ "filled\ in"\ oval.<br>\n\ The\ user\ specifies\ the\ x,y\ coordinate\ of\ the\ center\ of\ the\ oval\ as\ well\ as\ the\ horizontal\ and\ vertical\ radii\ values.\ \ <br>\n\ Example\:\ <br>\n\ Expo.fillOval(g,300,200,100,50);\ <br>\n\ Draws\ a\ solid\ oval\ with\ a\ horizontal\ radius\ of\ 100\ pixels\ and\ a\ vertical\ radius\ of\ 50\ pixels.\ <br>\n\ The\ center\ of\ this\ oval\ is\ located\ at\ the\ coordinate\ (300,200).\n
comment28.params=g\ centerX\ centerY\ hRadius\ vRadius\ start\ finish
comment28.target=void\ fillArc(java.awt.Graphics,\ int,\ int,\ int,\ int,\ int,\ int)
comment28.text=\n\ Draws\ a\ "solid"\ arc\ which\ will\ look\ either\ like\ a\ pie\ wedge\ or\ Pac-man.<br>\n\ A\ FILLED\ ARC\ is\ a\ "piece"\ of\ a\ SOLID\ OVAL.<br>\n\ The\ first\ 5\ parameters\ (g\ and\ 4\ ints)\ are\ the\ same\ as\ drawOval.<br>\n\ There\ are\ 2\ additional\ parameters\ for\ the\ starting\ degree\ value\ and\ finishing\ degree\ of\ the\ arc.\ <br>\n\ 0\ degrees\ is\ at\ the\ 12\:00\ position\ and\ the\ degrees\ progress\ in\ a\ CLOCKWISE\ fashion.\ <br>\n\ (90\ degrees\ is\ at\ 3\:00,\ 180\ degrees\ is\ at\ 6\:00,\ 270\ degrees\ is\ at\ 9\:00,\ 360\ degrees\ is\ back\ at\ 12\:00).\n
comment29.params=g\ coordinate
comment29.target=void\ fillPolygon(java.awt.Graphics,\ int[])
comment29.text=\n\ Draws\ an\ solid\ "filled-in"\ irregular\ polygon\ using\ 3\ or\ more\ sets\ of\ provided\ coordinates.\ <br>\n\ Examples\:\ <br>\n\ Expo.fillPolygon(g,100,300,200,100,300,300);\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //\ for\ a\ triangle\n\ Expo.fillPolygon(g,525,300,600,250,650,250,725,300,725,350,650,400);\ //\ for\ a\ hexagon\n
comment3.params=
comment3.target=int\ enterInt()
comment3.text=\n\ Allows\ input\ of\ an\ int\ (integer)\ from\ the\ keyboard\ in\ a\ text\ window.\ <br>\n\ Example\:\ <br>\n\ System.out.print("How\ old\ are\ you?\ \ -->\ \ ");\ <br>\n\ int\ age\ \=\ Expo.enterInt();\n
comment30.params=g\ centerX\ centerY\ radius\ sides
comment30.target=void\ fillRegularPolygon(java.awt.Graphics,\ int,\ int,\ int,\ int)
comment30.text=\n\ Draws\ a\ solid\ "filled\ in"\ regular\ polygon\ with\ a\ specified\ number\ of\ sides.<br>\n\ The\ center\ of\ this\ polygon\ is\ specified\ by\ centerX,centerY\ and\ its\ size\ is\ specified\ by\ radius\ <br>\n\ (As\ in\ the\ radius\ of\ the\ circle\ the\ regular\ polygon\ would\ fit\ inside).\ <br>\n\ Precondition\:\ sides\ >\=\ 3\ <br>\n\ Example\:\n\ Expo.fillRegularPolygon(g,300,200,100,8);\n\ Draws\ a\ solid\ "filled-in"\ regular\ octagon\ with\ a\ radius\ of\ 100\ pixels\ whose\ center\ is\ located\ at\ the\ coordinate\ (300,200).\n
comment31.params=g\ x1\ y1\ x2\ y2
comment31.target=void\ fillRectangle(java.awt.Graphics,\ int,\ int,\ int,\ int)
comment31.text=\n\ Draws\ a\ solid\ "filled\ in"\ rectangle.<br>\n\ The\ upper-left-hand\ corner\ is\ specified\ by\ x1,y1\ and\ the\ lower-right-hand\ corner\ is\ specified\ by\ x2,\ y2.\ <br>\n\ Example\:\ <br>\n\ Expo.fillRectangle(g,100,200,300,400);\ <br>\n\ Draws\ an\ open\ rectangle\ whose\ upper-left-hand\ coordinate\ is\ (100,200)\ and\ whose\ lower-right-hand\ coordinate\ is\ (300,400).\n
comment32.params=radius\ points
comment32.target=int\ getHalfRadius(int,\ int)
comment33.params=g\ centerX\ centerY\ radius\ points
comment33.target=void\ fillStar(java.awt.Graphics,\ int,\ int,\ int,\ int)
comment33.text=\n\ Draws\ a\ solid\ "filled\ in"\ star\ with\ a\ specified\ number\ of\ points.<br>\n\ The\ center\ of\ this\ star\ is\ specified\ by\ centerX,centerY\ and\ its\ size\ is\ specified\ by\ radius\ <br>\n\ (As\ in\ the\ radius\ of\ the\ circle\ the\ star\ would\ fit\ inside).\ <br>\n\ Precondition\:\ points\ >\=\ 2\ <br>\n\ Example\:\ <br>\n\ Expo.fillStar(g,300,200,100,8);\ <br>\n\ Draws\ a\ solid\ star\ with\ 8\ points\ and\ a\ radius\ of\ 100\ pixels\ whose\ center\ is\ located\ at\ the\ coordinate\ (300,200).\n
comment4.params=
comment4.target=double\ enterDouble()
comment4.text=\n\ Allows\ input\ of\ a\ double\ (real\ number)\ from\ the\ keyboard\ in\ a\ text\ window.\ <br>\n\ Example\:\ <br>\n\ System.out.print("What\ is\ your\ current\ GPA?\ \ {0.00\ -\ 4.00}\ \ -->\ \ ");\ <br>\n\ double\ gpa\ \=\ Expo.enterDouble();\n
comment5.params=
comment5.target=java.lang.String\ enterString()
comment5.text=\n\ Allows\ input\ of\ a\ String\ from\ the\ keyboard\ in\ a\ text\ window.\ <br>\n\ Example\:\ <br>\n\ System.out.print("What\ is\ your\ name?\ \ --->\ \ ");\ <br>\n\ String\ name\ \=\ Expo.enterString();\n
comment6.params=
comment6.target=char\ enterChar()
comment6.text=\n\ Allows\ input\ of\ a\ char\ from\ the\ keyboard\ in\ a\ text\ window.\ <br>\n\ Example\:\ <br>\n\ System.out.print("What\ is\ your\ middle\ initial?\ \ -->\ \ ");\ <br>\n\ char\ middleInitial\ \=\ Expo.enterChar();\n
comment7.params=g\ newColor
comment7.target=void\ setColor(java.awt.Graphics,\ java.awt.Color)
comment7.text=\n\ Allows\ the\ user\ to\ change\ the\ color,\ using\ a\ Color\ object\ parameter.\ <BR>\n\ Example\:\n\ Expo.setColor(g,Expo.red);\n\ Changes\ the\ current\ drawing\ \ color\ to\ red.\n\ 36\ colors\ constants\ are\ built\ into\ the\ Expo\ class.\ \ These\ colors\ are\ listed\ near\ the\ top\ of\ this\ file.\n
comment8.params=g\ colorNum
comment8.target=void\ setColor(java.awt.Graphics,\ int)
comment8.text=\n\ Allows\ the\ user\ to\ change\ to\ one\ of\ 10\ predefined\ primary\ colors\ using\ a\ single\ int\ parameter.<br>\n\ This\ is\ especially\ useful\ in\ programs\ where\ you\ want\ to\ change\ from\ one\ color\ to\ a\ contrasting\ color\ quickly.\ <br>\n\ 0\ \=\ black\ <br>\n\ 1\ \=\ red\ <br>\n\ 2\ \=\ green\ <br>\n\ 3\ \=\ blue\ <br>\n\ 4\ \=\ orange\ <br>\n\ 5\ \=\ cyan\ <br>\n\ 6\ \=\ magenta\ <br>\n\ 7\ \=\ yellow\ <br>\n\ 8\ \=\ gray\ <br>\n\ 9\ \=\ pink\ <br>\n\ Any\ negative\ number\ will\ give\ you\ white.\ <br><br>\n\ Example\:\ <br>\n\ Expo.setColor(g,1);\ <br>\n\ Changes\ the\ current\ drawing\ color\ to\ red.\n
comment9.params=g\ red\ green\ blue
comment9.target=void\ setColor(java.awt.Graphics,\ int,\ int,\ int)
comment9.text=\n\ Allows\ the\ user\ to\ change\ the\ color,\ using\ 3\ int\ parameters\ representing\ the\ amount\ of\ red,\ green\ and\ blue.<br>\n\ This\ allows\ for\ more\ than\ 16\ million\ different\ color\ combinations.\ <br>\n\ Precondition\:\ All\ 3\ color\ values\ need\ to\ be\ between\ 0\ and\ 255\ inclusive.\ <br>\n\ Example\:\ <br>\n\ Expo.setColor(g,190,10,47);\ <br>\n\ Changes\ the\ current\ drawing\ color\ to\ the\ shade\ of\ red\ used\ in\ the\ official\ Texas\ Flag\n
numComments=34
